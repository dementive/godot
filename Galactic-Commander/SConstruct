# GALACTIC COMMANDER - IMPORTANT NOTE:
# If this file is ever changes afterwards "bear -- scons platform=linux" (or whatever the build command is) has to be run in order to generate the compile_commands.json so clangd can find the godot-cpp includes.

#!/usr/bin/env python
import os
import sys

env = SConscript("godot-cpp/SConstruct")

# For reference:
# - CCFLAGS are compilation flags shared between C and C++
# - CFLAGS are for C-specific compilation flags
# - CXXFLAGS are for C++-specific compilation flags
# - CPPFLAGS are for pre-processor flags
# - CPPDEFINES are for pre-processor defines
# - LINKFLAGS are for linking flags

# Tell compiler where header files are
env.Append(CPPPATH=["src/", "src/space_gen", "src/gui", "src/core"])

# Tell compiler where cpp files are
sources = Glob("src/*.cpp") + Glob("src/space_gen/*.cpp") + Glob("src/gui/*.cpp") + Glob("src/core/*.cpp")

library = env.SharedLibrary(
    "demo/bin/lib-galactic-commander{}{}".format(env["suffix"], env["SHLIBSUFFIX"]),
    source=sources,
)

# Option to use C++20 for this extension by replacing CXXFLAGS
if env.get("is_msvc", False):
   env.Replace(CXXFLAGS=["/std:c++20"])
else:
   env.Replace(CXXFLAGS=["-std=c++20"])

# Reenable CXXFLAGS removed by the above from godot-cpp/tools/godotcpp.py
# Disable exception handling. Godot doesn't use exceptions anywhere, and this
# saves around 20% of binary size and very significant build time.
if env["disable_exceptions"]:
   if env.get("is_msvc", False):
       env.Append(CPPDEFINES=[("_HAS_EXCEPTIONS", 0)])
   else:
       env.Append(CXXFLAGS=["-fno-exceptions"])
elif env.get("is_msvc", False):
   env.Append(CXXFLAGS=["/EHsc"])

env.Append(CXXFLAGS=['-Wno-template-id-cdtor'])

Default(library)
